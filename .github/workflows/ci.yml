name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check src tests

    - name: Check import sorting with isort
      run: |
        isort --check-only src tests

    - name: Type check with mypy
      run: |
        mypy src

    - name: Test with pytest
      run: |
        pytest --cov=license_reporter --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-package-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        license-reporter --help

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-integration:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[enhanced]

    - name: Create test project with requirements.txt
      run: |
        mkdir test_project
        cd test_project
        echo "requests>=2.25.0" > requirements.txt
        echo "click>=8.0.0" >> requirements.txt

    - name: Test CLI with requirements.txt
      run: |
        cd test_project
        license-reporter --format json > report.json
        cat report.json
        # Verify JSON is valid
        python -c "import json; json.load(open('report.json'))"

    - name: Create test project with pyproject.toml
      run: |
        mkdir test_project_toml
        cd test_project_toml
        cat > pyproject.toml << EOF
        [project]
        name = "test-project"
        version = "1.0.0"
        dependencies = [
            "requests>=2.25.0",
            "click>=8.0.0"
        ]
        
        [project.optional-dependencies]
        dev = [
            "pytest>=7.0.0"
        ]
        EOF

    - name: Test CLI with pyproject.toml
      run: |
        cd test_project_toml
        license-reporter --include-dev --format markdown > report.md
        cat report.md
        # Verify markdown contains expected content
        grep -q "requests" report.md
        grep -q "pytest" report.md

    - name: Test runtime-only mode
      run: |
        cd test_project_toml
        license-reporter --runtime-only --format text > runtime_report.txt
        cat runtime_report.txt
        # Should contain requests but not pytest
        grep -q "requests" runtime_report.txt
        ! grep -q "pytest" runtime_report.txt || echo "pytest should not be in runtime-only report"
